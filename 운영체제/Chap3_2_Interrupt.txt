인터럽트
- CPU가 프로그램을 실행하고 있을 때, 입출력 하드웨어 등의 장치나 예외상황이 발생하여 처리가 필요할 경우에 CPU에 알려서 처리하는 기술

인터럽트가 필요한 이유
- 선점형 스케쥴러를 구현하기 위해서
- I/O Device 와의 커뮤니케이션 (저장매체에서 데이터 처리 완료 시, 프로세스를 깨워야함. block 에서 ready로)
- 예외 상황을 핸들링 하기 위해 (CPU가 프로그램을 실행 중일 때 입출력 하드웨어 등의 장치나 예외상황이 발생할 경우, CPU가 해당 처리를 할 수 있도록 CPU에 알려줘야 함.

인터럽트 처리의 예
- CPU가 프로그램을 실행하고 있을 때,

-- 입출력 하드웨어 등의 장치 이슈 발생
--- 파일 처리가 끝났다는 것을 OS에 알려주기
--- OS는 해당 프로세스를 block 에서 ready로 상태 변경하기

-- 또는 예외상황 발생
--- 0으로 나누는 계산 발생, OS에 알려주기
--- OS는 해당 프로세스 실행 중지/에러 표시 

인터럽트는 일종의 이벤트로 불림
이벤트에 맞게 OS가 처리를 하도록 구현이 되어있다.

주요 Interrupt

1. 계산하는 코드에서 0으로 나누는 코드 실행 (Divide-by-Zero Interrupt)
2. 타이머 인터럽트
- 선점형 스케쥴러를 위해 필요
- 하드웨어로부터 일정 시간마다 타이머 인터럽트를 OS에 알려줌
3. 입출력(IO) 인터럽트
- 프린터, 키보드, 마우스, 저장매체 등

인터럽트의 종류

- 내부 인터럽트 (소프트웨어 인터럽트)
-- 주로 프로그램 내부에서 잘못된 명령 또는 잘못된 데이터 사용시 발생
--- 0 으로 나눴을 때
--- 사용자 모드에서 허용되지 않은 명령 또는 공간 접근시
--- 계산 결과가 Overflow/Underflow 날 때

- 외부 인터럽트 (하드웨어 인터럽트)
-- 주로 하드웨어에서 발생되는 이벤트 (프로그램 외부)
--- 전원 이상, 기계문제, 키보드 등 IO관련 이벤트, Timer 이벤트

시스템 콜 인터럽트
- 시스템 콜 실행을 위해서는 강제로 코드에 인터럽트 명령을 넣어 CPU에 실행 시켜야 한다.
- 시스템 콜 실제 코드
-- eax 레지스터에 시스템 콜 번호를 넣고, ebx 레지스터에는 시스템 콜에 해당하는 인자값을 넣고, 소프트웨어 인터럽트 명령을 호출하면서 0x80값을 넘겨줌.
코드
mov eax, 1 < 시스템콜 번호
mov ebx, 0 < 인자
int 0x80 < 인터럽트 번호 // 소프트웨어 인터럽트 명령.

(시스템 콜에 해당하는 인터럽트 번호 : 0x80) 
int : 인터럽트 (cpu op 코드)

- 시스템 콜 인터럽트 명령을 호출하면서 0x80값을 넘겨줌
1. CPU는 사용자 모드를 커널 모드로 바꿔줌
2. IDT(Interrupt Descriptor Table)에서 0x80에 해당하는 주소(함수)를 찾아서 실행함
3. system_call() 함수에서 eax로부터 시스템 콜 번호를 찾아서, 해당 번호에 맞는 시스템 콜 함수로 이동
4. 해당 시스템 콜 함수 실행 후, 다시 사용자 모드로 변경 후 다시 해당 프로세스의 다음 코드 진행

인터럽트와 IDT
- 인터럽트는 미리 정의되어 각각 번호와 실행 코드를 가리키는 주소가 기록되어 있음
-- Where ? IDT에 기록
-- When ? 컴퓨터 부팅 시 OS가 기록
-- What ? OS 내부 코드

항상 인터럽트 발생 시 IDT를 확인
시스템 콜 인터럽트 명령은 0x80 번호가 미리 정의
인터럽트 0x80에 해당하는 OS 코드는 system_call() 이라는 함수
즉, IDT에는 0x80 -> system_call() 와 같은 정보가 기록되어 있는 것!

리눅스의 예
0~31 : 예외상황(내부/소프트웨어) 인터럽트 (일부는 정의안된 채로 남겨져 있음)
32~47 : 하드웨어 인터럽트 (주변장치 종류/갯수에 따라 변경 가능)
128 : 시스템 콜

인터럽트와 프로세스
1. 프로세스 실행 중 인터럽트 발생
2. 현 프로세스 실행 중단 (커널 진입)
3. 인터럽트 처리 함수 실행 (OS)
4. 현 프로세스 재실행 (사용자 모드 진입)
